	.text
	.file	"example1.c"
	.globl	main                    # -- Begin function main
	.p2align	4, 0x90
	.type	main,@function
main:                                   # @main
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$0, -4(%rbp)
	movl	a, %eax
	cmpl	b, %eax
	jbe	.LBB0_2
# %bb.1:
	movabsq	$.L.str, %rdi
	movb	$0, %al
	callq	printf
	movl	%eax, -28(%rbp)         # 4-byte Spill
	jmp	.LBB0_3
.LBB0_2:
	movabsq	$.L.str.1, %rdi
	movb	$0, %al
	callq	printf
	movl	%eax, -32(%rbp)         # 4-byte Spill
.LBB0_3:
	movl	a, %eax
	movl	%eax, %ecx
	movq	%rcx, -16(%rbp)
	movslq	b, %rcx
	movq	%rcx, -24(%rbp)
	movq	-16(%rbp), %rcx
	cmpq	-24(%rbp), %rcx
	jle	.LBB0_5
# %bb.4:
	movabsq	$.L.str, %rdi
	movb	$0, %al
	callq	printf
	movl	%eax, -36(%rbp)         # 4-byte Spill
	jmp	.LBB0_6
.LBB0_5:
	movabsq	$.L.str.1, %rdi
	movb	$0, %al
	callq	printf
	movl	%eax, -40(%rbp)         # 4-byte Spill
.LBB0_6:
	movl	a, %eax
	movl	%eax, %ecx
	movslq	b, %rdx
	cmpq	%rdx, %rcx
	jle	.LBB0_8
# %bb.7:
	movabsq	$.L.str, %rdi
	movb	$0, %al
	callq	printf
	movl	%eax, -44(%rbp)         # 4-byte Spill
	jmp	.LBB0_9
.LBB0_8:
	movabsq	$.L.str.1, %rdi
	movb	$0, %al
	callq	printf
	movl	%eax, -48(%rbp)         # 4-byte Spill
.LBB0_9:
	movl	a, %edi
	movl	b, %esi
	callq	add
	movabsq	$.L.str.2, %rdi
	movl	%eax, %esi
	movb	$0, %al
	callq	printf
	xorl	%esi, %esi
	movl	%eax, -52(%rbp)         # 4-byte Spill
	movl	%esi, %eax
	addq	$64, %rsp
	popq	%rbp
	retq
.Lfunc_end0:
	.size	main, .Lfunc_end0-main
	.cfi_endproc
                                        # -- End function
	.type	a,@object               # @a
	.data
	.globl	a
	.p2align	2
a:
	.long	100                     # 0x64
	.size	a, 4

	.type	b,@object               # @b
	.globl	b
	.p2align	2
b:
	.long	4294967196              # 0xffffff9c
	.size	b, 4

	.type	c,@object               # @c
	.globl	c
	.p2align	2
c:
	.long	100                     # 0x64
	.size	c, 4

	.type	d,@object               # @d
	.globl	d
	.p2align	3
d:
	.quad	-1000                   # 0xfffffffffffffc18
	.size	d, 8

	.type	h,@object               # @h
	.globl	h
	.p2align	3
h:
	.quad	10                      # 0xa
	.size	h, 8

	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"100 is bigger than -100\n"
	.size	.L.str, 25

	.type	.L.str.1,@object        # @.str.1
.L.str.1:
	.asciz	"100 is smaller than -100\n"
	.size	.L.str.1, 26

	.type	.L.str.2,@object        # @.str.2
.L.str.2:
	.asciz	"%d"
	.size	.L.str.2, 3


	.ident	"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"
	.section	".note.GNU-stack","",@progbits
